//@version=5
indicator('Monk COT Table', format=format.volume, precision=3, overlay = false)

import TradingView/LibraryCOT/2 as cot  

// Load COT data
cot_comm_long = cot.COTTickerid(COTType = "Legacy", CFTCCode = cot.convertRootToCOTCode("Auto"), includeOptions = false, metricName = "Commercial Positions", metricDirection = "Long", metricType = "All")
cot_comm_short = cot.COTTickerid(COTType = "Legacy", CFTCCode = cot.convertRootToCOTCode("Auto"), includeOptions = false, metricName = "Commercial Positions", metricDirection = "Short", metricType = "All")
cot_lspecs_long = cot.COTTickerid(COTType = "Legacy", CFTCCode = cot.convertRootToCOTCode("Auto"), includeOptions = false, metricName = "Noncommercial Positions", metricDirection = "Long", metricType = "All")
cot_lspecs_short = cot.COTTickerid(COTType = "Legacy", CFTCCode = cot.convertRootToCOTCode("Auto"), includeOptions = false, metricName = "Noncommercial Positions", metricDirection = "Short", metricType = "All")
cot_sspecs_long = cot.COTTickerid(COTType = "Legacy", CFTCCode = cot.convertRootToCOTCode("Auto"), includeOptions = false, metricName = "Nonreportable Positions", metricDirection = "Long", metricType = "All")
cot_sspecs_short = cot.COTTickerid(COTType = "Legacy", CFTCCode = cot.convertRootToCOTCode("Auto"), includeOptions = false, metricName = "Nonreportable Positions", metricDirection = "Short", metricType = "All")

comm_long = request.security(cot_comm_long, "1D", close, ignore_invalid_symbol = true)
comm_short = request.security(cot_comm_short, "1D", close, ignore_invalid_symbol = true)
lspecs_long = request.security(cot_lspecs_long, "1D", close, ignore_invalid_symbol = true)
lspecs_short = request.security(cot_lspecs_short, "1D", close, ignore_invalid_symbol = true)
sspecs_long = request.security(cot_sspecs_long, "1D", close, ignore_invalid_symbol = true)
sspecs_short = request.security(cot_sspecs_short, "1D", close, ignore_invalid_symbol = true)

// Calculate net positions for this week
netCom = comm_long - comm_short
netNoncom = lspecs_long - lspecs_short
netSpec = sspecs_long - sspecs_short

// Calculate last week's data (1D security returns daily data, so shift by [1])
comm_long_last_week = comm_long[2]
comm_short_last_week = comm_short[2]
lspecs_long_last_week = lspecs_long[2]
lspecs_short_last_week = lspecs_short[2]
sspecs_long_last_week = sspecs_long[2]
sspecs_short_last_week = sspecs_short[2]

// Calculate net positions for last week
netCom_last_week = comm_long_last_week - comm_short_last_week
netNoncom_last_week = lspecs_long_last_week - lspecs_short_last_week
netSpec_last_week = sspecs_long_last_week - sspecs_short_last_week

// Calculate changes from last week
comm_long_change = comm_long - comm_long_last_week
comm_short_change = comm_short - comm_short_last_week
netCom_change = netCom - netCom_last_week

lspecs_long_change = lspecs_long - lspecs_long_last_week
lspecs_short_change = lspecs_short - lspecs_short_last_week
netNoncom_change = netNoncom - netNoncom_last_week

sspecs_long_change = sspecs_long - sspecs_long_last_week
sspecs_short_change = sspecs_short - sspecs_short_last_week
netSpec_change = netSpec - netSpec_last_week

// Input for selecting which columns to show
show_longs = input.bool(true, title="Show Longs Column")
show_shorts = input.bool(true, title="Show Shorts Column")
show_net_positions = input.bool(true, title="Show Net Positions Column")
show_longs_change = input.bool(true, title="Show Longs Change Column")
show_shorts_change = input.bool(true, title="Show Shorts Change Column")
show_net_change = input.bool(true, title="Show Net Change Column")

// Input for selecting which categories to show
show_commercials = input.bool(true, title="Show Commercials Data")
show_noncommercials = input.bool(true, title="Show Non-commercials Data")
show_retail = input.bool(true, title="Show Retail Data")

// Conditional coloring for net positions and net changes
netCom_color = netCom >= 0 ? color.green : color.red
netNoncom_color = netNoncom >= 0 ? color.green : color.red
netSpec_color = netSpec >= 0 ? color.green : color.red

netCom_change_color = netCom_change >= 0 ? color.green : color.red
netNoncom_change_color = netNoncom_change >= 0 ? color.green : color.red
netSpec_change_color = netSpec_change >= 0 ? color.green : color.red

// Create a table to display the changes
var table cot_table = table.new(position.middle_center, 4, 7, bgcolor=#496bc733, force_overlay = false)

// Header row
table.cell(cot_table, 0, 0, "Category", bgcolor=#395bd4, text_color=color.white)

if show_longs
    table.cell(cot_table, 0, 1, "Total Longs", bgcolor=color.gray, text_color=color.white)

if show_shorts
    table.cell(cot_table, 0, 2, "Total Shorts", bgcolor=color.gray, text_color=color.white)

if show_net_positions
    table.cell(cot_table, 0, 3, "Net Positions", bgcolor=color.gray, text_color=color.white)

if show_longs_change
    table.cell(cot_table, 0, 4, "Longs Change", bgcolor=color.gray, text_color=color.white)

if show_shorts_change
    table.cell(cot_table, 0, 5, "Shorts Change", bgcolor=color.gray, text_color=color.white)

if show_net_change
    table.cell(cot_table, 0, 6, "Net Change", bgcolor=color.gray, text_color=color.white)

// Commercials data row
if show_commercials
    table.cell(cot_table, 1, 0, "Commercials",  bgcolor = #395bd4, text_color=color.white)
    
    if show_longs
        table.cell(cot_table, 1, 1, str.tostring(comm_long), text_color=color.white)
    
    if show_shorts
        table.cell(cot_table, 1, 2, str.tostring(comm_short), text_color=color.white)
    
    if show_net_positions
        table.cell(cot_table, 1, 3, str.tostring(netCom), text_color=netCom_color)
    
    if show_longs_change
        table.cell(cot_table, 1, 4, str.tostring(comm_long_change), text_color=color.white)
    
    if show_shorts_change
        table.cell(cot_table, 1, 5, str.tostring(comm_short_change), text_color=color.white)
    
    if show_net_change
        table.cell(cot_table, 1, 6, str.tostring(netCom_change), text_color=netCom_change_color)

// Non-commercials data row
if show_noncommercials
    table.cell(cot_table, 2, 0, "Non-commercials", bgcolor = #395bd4, text_color=color.white)
    
    if show_longs
        table.cell(cot_table, 2, 1, str.tostring(lspecs_long), text_color=color.white)
    
    if show_shorts
        table.cell(cot_table, 2, 2, str.tostring(lspecs_short), text_color=color.white)
    
    if show_net_positions
        table.cell(cot_table, 2, 3, str.tostring(netNoncom), text_color=netNoncom_color)
    
    if show_longs_change
        table.cell(cot_table, 2, 4, str.tostring(lspecs_long_change), text_color=color.white)
    
    if show_shorts_change
        table.cell(cot_table, 2, 5, str.tostring(lspecs_short_change), text_color=color.white)
    
    if show_net_change
        table.cell(cot_table, 2, 6, str.tostring(netNoncom_change), text_color=netNoncom_change_color)

// Retail data row
if show_retail
    table.cell(cot_table, 3, 0, "Retail",  bgcolor = #395bd4, text_color=color.white)
    
    if show_longs
        table.cell(cot_table, 3, 1, str.tostring(sspecs_long), text_color=color.white)
    
    if show_shorts
        table.cell(cot_table, 3, 2, str.tostring(sspecs_short), text_color=color.white)
    
    if show_net_positions
        table.cell(cot_table, 3, 3, str.tostring(netSpec), text_color=netSpec_color)
    
    if show_longs_change
        table.cell(cot_table, 3, 4, str.tostring(sspecs_long_change), text_color=color.white)
    
    if show_shorts_change
        table.cell(cot_table, 3, 5, str.tostring(sspecs_short_change), text_color=color.white)
    
    if show_net_change
        table.cell(cot_table, 3, 6, str.tostring(netSpec_change), text_color=netSpec_change_color)
